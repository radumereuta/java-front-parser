module starter

imports
  libstratego-sglr
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/JavaFrontParser

rules

	// compile like this:
	// lang -jar strategoxt.jar -i starter.str -o Ocl -la stratego-sglr --lib -I .. -p oclParser.lib --clean

 	langParse = ?[a, b] ; <parse-string(my-parse-error|<import-term(include/JavaFrontParser.tbl)>)> b ; (handleErrors <+ parsedJustFine2)

 	my-parse-error = id//debug(!"ParseError: ")
 	handleErrors =
		(?error(_,_) ; (to-xml-error <+ debug(!"Error: This should not happen. Please report.")))

	xmlStringEscapeToString = string-replace(|"&", "&amp;") ; string-replace(|">", "&gt;") ; string-replace(|"<", "&lt;") ; string-replace(|"\\\"", "&quot;")
	to-xml-error:
		error(a, b*) -> $[<?xml version="1.0" encoding="UTF-8" ?>
		<T>
			<error value="[<xmlStringEscapeToString>a]">
				[b']
			</error>
		</T>
		]
		where b' := <all(to-xml-error)> b*

	to-xml-error:
		localized(a, b) ->
			$[<localized message="[<xmlStringEscapeToString>a]" filename="[<xmlStringEscapeToString>x]" loc="[loc]" />
			]
		where (!b => (x, area(y1, y2, y3, y4, y5, y6))) <+ (!b => area-in-file(x, area(y1, y2, y3, y4, y5, y6)))
		where loc := <write-to-string> (y1, y2, y3, y4)



	my-open-error = id //debug(!"OpenError: ")
	my-parse-error = id //debug(!"ParseError: ")
	parsedJustFine:
		x -> $[<?xml version="1.0" encoding="UTF-8" ?>
			<T>
				[<to-xml> x]
			</T>]

	getLocAsString        = (prim("SSL_EXT_origin_location", <id>) ; write-to-string) <+ !"(0,0,0,0)"

	to-xml:
		a#(b) -> $[<term cons="[a]" loc="[loc]">
					[<all(to-xml)> b]
			</term>
		]
		where not(<string-starts-with(|"\"")> a)
		where not(!a => [])
		where loc := <getLocAsString>
		//where <debug(!"Term1: ")> (a, b)

	to-xml:
		x#(b) -> $[<terminal value=[x] loc="[loc]"/>
		]
		where <string-starts-with(|"\"")> x
		where loc := <getLocAsString>
		//where debug(!"Term2: ")

	to-xml:
		x -> $[<list loc="[loc]">
				[<all(to-xml)> x]
		</list>
		]
		where loc := <getLocAsString>
		//where debug(!"Term3: ")


// -------------------------------------------------------------


	parsedJustFine2:
		x -> $[[rez]]
		where rez := <to-kast> x

	to-kast:
		x -> $[# "[<escape> x]"(.KList)]
		where <is-string> x

	to-kast:
		x -> $[# [x](.KList)]
		where <is-int> x
	
	
   to-kast:
    	ExprList(b) -> $[ [<to-kast-commalist> b]]	
   
   
   to-kast-commalist:
   		[hd | tl] -> $['_`,_([<to-kast> hd],, 
   						[<to-kast-commalist> tl])]
   						
   to-kast-commalist:
   		[] -> $['.List`{"`,"`}(.KList)]
   		
   		
   to-kast:
    	DimExprList(b) -> $[ [<to-kast-tablist> b] ]	
   
   
   to-kast-tablist:
   		[hd | tl] -> $['__([<to-kast> hd],, 
   						[<to-kast-tablist> tl])]
   						
   to-kast-tablist:
   		[] -> $['.List`{""`}(.KList)]
   		
   		
   		
   to-kast:
    	DimList(b) -> $[ [<to-kast-tablist> b] ]	
   
   		
   to-kast:
    	CatchClauseList(b) -> $[ [<to-kast-tablist> b] ]	
 
   		
   to-kast:
    	FormalParamList(b) -> $[ [<to-kast-commalist> b] ]	
   		
   		
   to-kast:
    	VarInitList(b) -> $[ [<to-kast-commalist> b] ]	

   		
	to-kast:
		a#(b) -> $[[<to-kast-dotuserlist> (a,b)]]
		where (!a => "IdList")
		
	to-kast:
		a#(b) -> $[[<to-kast-commauserlist> (a,b)]]
		where (!a => "InterfaceTypeList")
	
	to-kast:
		a#(b) -> $[[<to-kast-commauserlist> (a,b)]]
		where (!a => "ExceptionTypeList")
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "TypeDecList")
		
	to-kast:
		a#(b) -> $[[<to-kast-commauserlist> (a,b)]]
		where (!a => "VarDecList")
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "ImportDecList")
		
	to-kast:
		a#(b) -> $[[<to-kast-commauserlist> (a,b)]]
		where (!a => "ActualTypeArgList")
		
	to-kast:
		a#(b) -> $[[<to-kast-anduserlist> (a,b)]]
		where (!a => "ClassOrInterfaceTypeList")
		
	to-kast:
		a#(b) -> $[[<to-kast-commauserlist> (a,b)]]
		where (!a => "TypeParamList")
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "AbstractMethodModList") 
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "AnnoAbstractMethodModList")
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "AnnoMethodModList")  
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "AnnoVarModList")
	
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "AnnoClassModList")
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "AnnoConstantModList")
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "AnnoConstrModList")
	
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "AnnoFieldModList")
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "AnnoInterfaceModList")
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "AnnoList") 
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "AnnoElemDecList")
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "InterfaceMemberDecList") 
		
	to-kast:
		a#(b) -> $[[<to-kast-commauserlist> (a,b)]]
		where (!a => "ElemValPairList") 
		
	to-kast:
		a#(b) -> $[[<to-kast-commauserlist> (a,b)]]
		where (!a => "ElemValList") 
		
	to-kast:
		a#(b) -> $[[<to-kast-commauserlist> (a,b)]]
		where (!a => "EnumConstList") 	
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "StringPartList")
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "ClassBodyDecList") 
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "BlockStmList") 
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "SwitchGroupList") 
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "SwitchLabelList") 
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "VarInitList") 
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "FormalParamList") 
		
	to-kast:
		a#(b) -> $[[<to-kast-userlist> (a,b)]]
		where (!a => "CatchClauseList") 

		
	to-kast-commauserlist:
		(a,[[hd | tl]]) -> $['[a]([<to-kast> hd],,
		               		      [<to-kast-commauserlist> (a, [tl])])]
		             
	to-kast-commauserlist:
		(a,[[]]) -> $['.List`{"`,"`}(.KList)]
		
	to-kast-userlist:
		(a,[[hd | tl]]) -> $['[a]([<to-kast> hd],,
		               		      [<to-kast-userlist> (a, [tl])])]
		             
	to-kast-userlist:
		(a,[[]]) -> $['.List`{""`}(.KList)]
		
	to-kast-dotuserlist:
		(a,[[hd | tl]]) -> $['[a]([<to-kast> hd],,
		               		      [<to-kast-dotuserlist> (a, [tl])])]
		             
	to-kast-dotuserlist:
		(a,[[]]) -> $['.List`{"."`}(.KList)]
		
	to-kast-anduserlist:
		(a,[[hd | tl]]) -> $['[a]([<to-kast> hd],,
		               		      [<to-kast-anduserlist> (a, [tl])])]
		             
	to-kast-anduserlist:
		(a,[[]]) -> $['.List`{"&"`}(.KList)]
		
	


	to-kast:
		a#(b) -> $['[a](
				     [<to-kast-list> b]
				   ) ]
		where not(<string-starts-with(|"\"")> a)
		where not(!a => [])
		//where <debug(!"Term1: ")> (a, b)

	to-kast:
		a#(b) -> $[[<to-kast-list> b]]


	to-kast-list:
		[hd | tl] -> $[[<to-kast> hd],,
		               [[<to-kast-list> tl]]]
		where not(!tl => [])

	to-kast-list:
		[hd | tl] -> $[[<to-kast> hd]]
		where !tl => []

	to-kast-list:
		[] -> $[.KList]
		
		

	
		
		
		


	// lang -jar strategoxt.jar -i starter.str -o Ocl -la stratego-sglr --lib -I .. -p oclParser.lib --clean
	// lang -jar strategoxt.jar -i starter.str -o langParser -la stratego-sglr -I .. -m safecallcmd1 -p ro.uaic.info.fmse.parser

	safecallcmd1 = ?[a, b] ; <parse-file(my-open-error, my-parse-error|<import-term(include/JavaFrontParser.tbl)>)> b ; to-kast
















